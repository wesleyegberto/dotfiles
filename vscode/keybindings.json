[
    // === Workspace === {{{
    // Sidebars
    // {
    //     "key": "cmd+k cmd+b",
    //     "command": "workbench.action.toggleActivityBarVisibility"
    // },
    {
        "key": "cmd+k cmd+b",
        "command": "workbench.action.toggleSidebarVisibility",
    },
    {
        "key": "space e",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "!terminalFocus && !editorFocus && !inputFocus && explorerViewletVisible && filesExplorerFocus"
    },
    {
        "key": "space e",
        "command": "workbench.view.explorer",
        "when": "!terminalFocus && !editorFocus && !inputFocus && !filesExplorerFocus"
    },
    {
        "key": "cmd+k cmd+e",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },
    {
        "key": "cmd+k cmd+e",
        "command": "workbench.view.explorer",
        "when": "!filesExplorerFocus"
    },
    {
        "key": "cmd+k cmd+c",
        "when": "explorerViewletVisible",
        "command": "workbench.files.action.collapseExplorerFolders"
    },
    {
        "key": "cmd+k cmd+f",
        "command": "workbench.view.search"
    },
    {
        "key": "cmd+k cmd+c",
        "when": "searchViewletVisible",
        "command": "search.action.clearSearchResults"
    },
    {
        "key": "cmd+k cmd+g",
        "command": "workbench.view.scm"
    },
    {
        "key": "cmd+k cmd+l",
        "command": "workbench.view.extension.gitlens"
    },
    {
        "key": "cmd+k cmd+x",
        "command": "workbench.extensions.action.showEnabledExtensions"
    },
    // Bookmarks view extension
    {
        "key": "cmd+k cmd+m",
        "command": "-workbench.extensions.action.showRecommendedKeymapExtensions"
    },
    {
        "key": "cmd+k cmd+m",
        "command": "workbench.view.extension.bookmarks",
    },
    // VS Notes view extension
    {
        "key": "cmd+k cmd+n",
        "command": "workbench.view.extension.vsnotes",
    },
    // Test view extension
    {
        "key": "cmd+k cmd+t",
        "command": "-workbench.action.selectTheme"
    },
    {
        "key": "cmd+k cmd+t",
        "command": "workbench.view.extension.test"
    },
    // }}}

    // === Sidebar - File Explorer === {{{
    {
        "key": "cmd+n",
        "command": "explorer.newFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "a",
        "command": "explorer.newFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "shift+cmd+n",
        "command": "explorer.newFolder",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "shift+a",
        "command": "explorer.newFolder",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "v",
        "command": "explorer.openToSide",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "d",
        "command": "moveFileToTrash",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "r",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "cmd+r",
        "command": "workbench.files.action.refreshFilesExplorer",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "cmd+r",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "cmd+n",
        "command": "explorer.newFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    // }}}

    // === Code navigation === {{{
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "cmd+b",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "cmd+f12",
        "command": "-editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "shift+cmd+b",
        "command": "-workbench.action.tasks.build"
    },
    {
        "key": "shift+cmd+b",
        "command": "editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "alt+f12",
        "command": "-editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "alt+b",
        "command": "editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+cmd+f12",
        "command": "-editor.action.peekImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+alt+b",
        "command": "editor.action.peekImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },

    {
        "key": "shift+cmd+i",
        "command": "editor.action.formatDocument",
        "when": "editorTextFocus && !editorReadonly"
    },
    // }}}

    // === Bindings used in NeoVim === {{{
    { // Force ctrl+d to be handled by Vim
        "key": "ctrl+d",
        "command": "extension.vim_ctrl+d",
        "when": "editorTextFocus && vim.active"
    },
    {
        "key": "cmd+k cmd+y", // <leader>y
        "command": "workbench.files.action.showActiveFileInExplorer"
    },
    {
        "key": "ctrl+s",
        "command": "workbench.action.files.save"
    },
    // }}}

    // === Navigation with C-p and C-n === {{{
    {
        "key": "ctrl+p",
        "command": "-cursorUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpen",
        "when": "!inFilesPicker && !terminalFocus && !inQuickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "history.showPrevious",
        "when": "historyNavigationEnabled && historyNavigationWidget"
    },
    {
        "key": "ctrl+p",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "ctrl+p",
        "command": "notifications.focusPreviousToast",
        "when": "notificationFocus && notificationToastsVisible && parameterHintsMultipleSignatures && !parameterHintsVisible"
    },
    {
        "key": "ctrl+p",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+n",
        "command": "history.showNext",
        "when": "historyNavigationEnabled && historyNavigationWidget"
    },
    {
        "key": "ctrl+n",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "ctrl+n",
        "command": "notifications.focusNextToast",
        "when": "notificationFocus && notificationToastsVisible && parameterHintsMultipleSignatures && !parameterHintsVisible"
    },
    {
        "key": "ctrl+n",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    // }}}

    // === Editing === {{{
    {
        "key": "ctrl+b",
        "command": "-extension.vim_ctrl+b",
        "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+o",
        "command": "-extension.vim_ctrl+o",
        "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl"
    },
    {
        "key": "ctrl+o",
        "command": "-lineBreakInsert",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+o",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "ctrl+o",
        "command": "workbench.action.quickInputBack",
        "when": "inQuickOpen"
    },
    {
        "key": "alt+j",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+j",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+k",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+k",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },

    {
        "key": "ctrl+shift+s",
        "command": "editor.action.sourceAction",
        "when": "editorTextFocus && !editorReadonly"
    },

    // Duplicate Line
    {
        "key": "alt+cmd+down",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+cmd+j",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+cmd+up",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+cmd+k",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },

    // Multiline
    {
        "key": "shift+alt+up",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+down",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+n",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus && !suggestWidgetVisible && !codeActionMenuVisible"
    },
    {
        "key": "shift+q",
        "command": "editor.action.moveSelectionToPreviousFindMatch",
        "when": "editorFocus && editorHasMultipleSelections"
    },
    {
        "key": "q",
        "command": "editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus && editorHasMultipleSelections"
    },
    {
        "key": "cmd+right",
        "command": "editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorFocus && editorHasSelection"
    },
    // }}}

    // === Panels/Groups === {{{
    {
        "key": "ctrl+/",
        "command": "workbench.action.switchWindow"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "ctrl+w x",
        "command": "workbench.action.toggleEditorGroupLayout",
        "when": "editorFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w shift+h",
        "command": "workbench.action.moveEditorToLeftGroup",
        "when": "editorFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w shift+l",
        "command": "workbench.action.moveEditorToRightGroup",
        "when": "editorFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w shift+k",
        "command": "workbench.action.moveEditorToAboveGroup",
        "when": "editorFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w shift+j",
        "command": "workbench.action.moveEditorToBelowGroup",
        "when": "editorFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w shift+r",
        "command": "workbench.action.moveEditorToPreviousGroup",
        "when": "editorFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w r",
        "command": "workbench.action.moveEditorToNextGroup",
        "when": "!terminalFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w \\",
        "command": "workbench.action.focusLastEditorGroup",
        "when": "!terminalFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w w",
        "command": "workbench.action.focusNextGroup",
        "when": "!terminalFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w p",
        "command": "workbench.action.focusPreviousGroup",
        "when": "!terminalFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w n",
        "command": "workbench.action.focusNextGroup",
        "when": "!terminalFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w shift+.",
        "command": "workbench.action.increaseViewSize",
        "when": "!terminalFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w shift+m",
        "command": "workbench.action.maximizeEditor",
        "when": "!terminalFocus && vim.active && vim.mode == 'Normal'"
    },
   {
        "key": "ctrl+w shift+,",
        "command": "workbench.action.decreaseViewSize",
        "when": "!terminalFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+w c",
        "command": "workbench.action.closeActiveEditor",
        "when": "!terminalFocus && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "when": "!inEditorsPicker && !inQuickOpen"
    },
    {
        "key": "ctrl+cmd+p",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+b ctrl+b",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+cmd+p",
        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+cmd+n",
        "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+tab+n",
        "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    // }}}

    // === Terminal === {{{
    {
        "key": "cmd+j",
        "command": "workbench.action.togglePanel",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+j",
        "command": "workbench.action.terminal.focus",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+b c",
        "command": "workbench.action.terminal.newInActiveWorkspace"
    },
    {
        "key": "ctrl+b x",
        "command": "workbench.action.terminal.kill"
    },
    {
        "key": "ctrl+b ,",
        "command": "workbench.action.terminal.rename"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.terminal.clear",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+b shift+\\",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+5",
        "command": "-workbench.action.terminal.split",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+b shift+=",
        "command": "workbench.action.toggleMaximizedPanel"
    },
    {
        "key": "ctrl+b shift+.",
        "command": "workbench.action.increaseViewSize",
        "when": "terminalFocus"
    },
   {
        "key": "ctrl+b shift+,",
        "command": "workbench.action.decreaseViewSize",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+b ctrl+j",
        "command": "workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "ctrl+b ctrl+h",
        "command": "workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "ctrl+b ctrl+l",
        "command": "workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "ctrl+b ctrl+k",
        "command": "workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "ctrl+b ctrl+down",
        "command": "workbench.action.terminal.resizePaneDown",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+b ctrl+left",
        "command": "workbench.action.terminal.resizePaneLeft",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+b ctrl+right",
        "command": "workbench.action.terminal.resizePaneRight",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+b ctrl+up",
        "command": "workbench.action.terminal.resizePaneUp",
        "when": "terminalFocus && terminalProcessSupported"
    },
    // {
    //     "key": "shift+8",
    //     "command": "workbench.action.terminal.findNext",
    //     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    // },
    // {
    //     "key": "shift+3",
    //     "command": "workbench.action.terminal.findPrevious",
    //     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    // },
    {
        "key": "ctrl+b 1",
        "command": "workbench.action.terminal.focusAtIndex1"
    },
    {
        "key": "ctrl+b 2",
        "command": "workbench.action.terminal.focusAtIndex2"
    },
    {
        "key": "ctrl+b 3",
        "command": "workbench.action.terminal.focusAtIndex3"
    },
    {
        "key": "ctrl+b 4",
        "command": "workbench.action.terminal.focusAtIndex4"
    },
    {
        "key": "ctrl+b 5",
        "command": "workbench.action.terminal.focusAtIndex5"
    },
    {
        "key": "ctrl+b 6",
        "command": "workbench.action.terminal.focusAtIndex6"
    },
    {
        "key": "ctrl+b 7",
        "command": "workbench.action.terminal.focusAtIndex7"
    },
    {
        "key": "ctrl+b 8",
        "command": "workbench.action.terminal.focusAtIndex8"
    },
    {
        "key": "ctrl+b 9",
        "command": "workbench.action.terminal.focusAtIndex9"
    },
    {
        "key": "ctrl+b o",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+b ;",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+b shift+\\",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported"
    },
    /// }}}

    // === Clean === {{
    {
        "key": "cmd+k",
        "command": "-workbench.action.terminal.clear",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+r cmd+t",
        "command": "-dotnet.test.debugTestsInContext",
        "when": "editorTextFocus && editorLangId == 'csharp'"
    },
    {
        "key": "cmd+r t",
        "command": "-dotnet.test.runTestsInContext",
        "when": "editorTextFocus && editorLangId == 'csharp'"
    },
    {
        "key": "cmd+k cmd+r",
        "command": "-workbench.action.keybindingsReference"
    },
    {
        "key": "alt+m",
        "command": "-extension.minifyJSON"
    },
    {
        "key": "alt+m",
        "command": "-markdownQuickPick",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+cmd+v",
        "command": "-markdown-preview-enhanced.openPreview",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "cmd+\\",
        "command": "-workbench.action.terminal.split",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+k cmd+\\",
        "command": "-workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "cmd+\\",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "alt+cmd+n",
        "command": "extension.open"
    },
    {
        "key": "alt+n",
        "command": "-extension.open"
    },
    {
        "key": "shift+cmd+v",
        "command": "-notebook.cell.pasteAbove",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+cmd+v",
        "command": "-markdown.showPreview",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "shift+cmd+v",
        "command": "-markdown.extension.togglePreview",
        "when": "!terminalFocus"
    },
    {
        "key": "cmd+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "shift+cmd+e",
        "command": "-workbench.view.explorer"
    },
    {
        "key": "shift+cmd+d",
        "command": "-workbench.view.debug"
    },
    {
        "key": "shift+cmd+x",
        "command": "-workbench.view.extensions"
    },
    {
        "key": "shift+cmd+r",
        "command": "-rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "shift+cmd+f",
        "command": "-workbench.view.search",
        "when": "!searchViewletVisible"
    },
    {
        "key": "shift+cmd+f",
        "command": "-workbench.action.findInFiles"
    },
    {
        "key": "shift+cmd+h",
        "command": "-workbench.action.replaceInFiles"
    },
    {
        "key": "alt+cmd+k",
        "command": "-bookmarks.toggle",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.switchWindow"
    },
    {
        "key": "cmd+k down",
        "command": "-workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "cmd+k left",
        "command": "-workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "cmd+k right",
        "command": "-workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "cmd+k up",
        "command": "-workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "ctrl+cmd+down",
        "command": "-workbench.action.terminal.resizePaneDown",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+cmd+left",
        "command": "-workbench.action.terminal.resizePaneLeft",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+cmd+right",
        "command": "-workbench.action.terminal.resizePaneRight",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+cmd+up",
        "command": "-workbench.action.terminal.resizePaneUp",
        "when": "terminalFocus && terminalProcessSupported"
    },
    // {
    //     "key": "cmd+g",
    //     "command": "-workbench.action.terminal.findNext",
    //     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    // },
    // {
    //     "key": "shift+f3",
    //     "command": "-workbench.action.terminal.findPrevious",
    //     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    // },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "alt+cmd+down",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+cmd+up",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+5",
        "command": "-workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+\\",
        "command": "-workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "alt+cmd+0",
        "command": "-workbench.action.toggleEditorGroupLayout"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "space",
        "command": "-breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "space",
        "command": "-debug.toggleBreakpoint",
        "when": "breakpointsFocused && !inputFocus"
    },
    {
        "key": "space",
        "command": "-list.toggleExpand",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "escape escape",
        "command": "-workbench.action.exitZenMode",
        "when": "inZenMode"
    },
    {
        "key": "cmd+k cmd+f",
        "command": "-editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+\\",
        "command": "-editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+j",
        "command": "-editor.action.joinLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-markdown-preview-enhanced.syncPreview",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+w",
        "command": "-extension.vim_ctrl+w",
        "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"
    },
    {
        "key": "ctrl+w",
        "command": "extension.vim_ctrl+w"
    },
    {
        "key": "cmd+; cmd+l",
        "command": "-testing.debugLastRun"
    },
    {
        "key": "cmd+; cmd+c",
        "command": "-testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+; l",
        "command": "-testing.reRunLastRun"
    },
    {
        "key": "cmd+; a",
        "command": "-testing.runAll"
    },
    {
        "key": "cmd+; c",
        "command": "-testing.runAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+; f",
        "command": "-testing.runCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+; cmd+a",
        "command": "-testing.debugAll"
    },
    {
        "key": "cmd+; cmd+f",
        "command": "-testing.debugCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+; cmd+e",
        "command": "-testing.debugFailTests"
    },
    {
        "key": "cmd+; m",
        "command": "-testing.openOutputPeek"
    },
    {
        "key": "cmd+; e",
        "command": "-testing.reRunFailTests"
    },
    {
        "key": "ctrl+n",
        "command": "-extension.vim_ctrl+n",
        "when": "editorTextFocus && vim.active && vim.use<C-n> && !inDebugRepl || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
    },
    {
        "key": "ctrl+n",
        "command": "-cursorDown",
        "when": "textInputFocus"
    },
    {
        "key": "cmd+d",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "cmd+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "cmd+k cmd+h",
        "command": "testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    {
        "key": "cmd+h",
        "command": "-testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    {
        "key": "cmd+k cmd+\\",
        "command": "-workbench.action.splitEditorUp"
    },
    // }}}
]